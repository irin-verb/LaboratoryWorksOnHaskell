module L5 where

	-- Получить первые 10 кратные 3 и заканчивающиеся на 4	

	-- 3-значные числа где есть 7		

	-- Факториал числа в лоб
		factorial :: Integer -> Integer
		factorial n = if n==0 then 1 else n*factorial (n-1)
		
-------------------------------------------------------------------------

	-- СОПОСТАВЛЕНИЕ С ОБРАЗЦОМ (потому что If не везде подходит)
		factorial' :: Integer -> Integer
		factorial' 0 = 1
		factorial' n = n * factorial' (n-1) 
	-- если тут стоит переменнная, а не значение, то это - неопровержимый образец

	-- для списка. собственная реализация head 
	-- для списка (x:xs) - неопровержимый образец, где х голова а хs все остальное
		head' :: [a] -> a
		head' [] = error "The first is empty"
		head' (x:xs) = x --А можно написать и (x:_) тоже будет работать

	-- собственная реализация sum (вариант 1)
		sum' :: Num a => [a] -> a		
		sum' [] = 0
		sum' (x:xs) = x + sum' xs

	-- собственная реализация sum (вариант 2)
		sum'' :: Num a => [a] -> a
		sum'' [] = 0
		sum'' (x:xs) = x + sum' xs

----------------------------------------------------------

	-- Увеличить элементы списка на единицу
	incList :: [Integer] -> Integer
	incList [] = []
	incList(x:xs) = (x + 1) : incList xs
	
	
	-- Собственная реализация функции zipWith
	zipWith' :: (a -> b -> c) -> [a] -> [b] -> [c]
	zipWith' _ [] _ = []
	zipWith' _ _ [] = []
	zipWith' f (x:xs) (y:ys) = f x y : zipWith' f xs ys
	
	
	-- Собственная реализация функции zip
	zip' :: [a] -> [b] -> [(a, b)]
	zip' _ [] = []
	zip' [] _ = []
	zip' (x:xs) (y:ys) = (x, y): zip' xs ys
	
	-- Собственная реализация функции map
	map' :: (a -> b) -> [a] -> [b]
	map' _ [] = []
	map' f (x:xs) = f x : map' f xs
	
--------------------------------------------------------
	-- ОХРАННОЕ ВЫРАЖЕНИЕ
	
	-- Собственная реализация filter
	filter' :: (a -> Bool) -> [a] -> [b]
	filter' _ [] = []
	filter' p (x:xs)
		| p x = x : filter' p xs
		| otherwise = filter' p xs	
		
--------------------------------------------
	-- Лямбда-выражение
	
	

